// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Registration.Models;

namespace Registration.Migrations.APIDB
{
    [DbContext(typeof(APIDBContext))]
    [Migration("20200804093849_APIDB")]
    partial class APIDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Registration.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Registration.Models.GroupConnections", b =>
                {
                    b.Property<Guid>("connectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("connectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("wallID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("wallID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("wallID2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("wallID3")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("connectionId");

                    b.HasIndex("wallID");

                    b.HasIndex("wallID1");

                    b.HasIndex("wallID2");

                    b.HasIndex("wallID3");

                    b.ToTable("GroupConnections");
                });

            modelBuilder.Entity("Registration.Models.Term", b =>
                {
                    b.Property<Guid>("termID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("termName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("wallID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("wallID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("wallID2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("wallID3")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("termID");

                    b.HasIndex("wallID");

                    b.HasIndex("wallID1");

                    b.HasIndex("wallID2");

                    b.HasIndex("wallID3");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Registration.Models.Wall", b =>
                {
                    b.Property<Guid>("wallID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("wallName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("wallID");

                    b.HasIndex("userID");

                    b.ToTable("Walls");

                    b.HasData(
                        new
                        {
                            wallID = new Guid("1abe31c0-7deb-46e8-8edc-6ff84100805e"),
                            dateCreated = new DateTime(2020, 8, 4, 11, 38, 48, 488, DateTimeKind.Local).AddTicks(2438),
                            wallName = "PremierLeague"
                        },
                        new
                        {
                            wallID = new Guid("57bd1a53-bcbc-436d-aa88-97af5b18f52d"),
                            dateCreated = new DateTime(2020, 8, 4, 11, 38, 48, 488, DateTimeKind.Local).AddTicks(3674),
                            wallName = "PremierLeague1"
                        },
                        new
                        {
                            wallID = new Guid("16579944-1c26-45ea-8465-4ff4dadc6a8b"),
                            dateCreated = new DateTime(2020, 8, 4, 11, 38, 48, 488, DateTimeKind.Local).AddTicks(3700),
                            wallName = "PremierLeague2"
                        });
                });

            modelBuilder.Entity("Registration.Models.GroupConnections", b =>
                {
                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupAConnections")
                        .HasForeignKey("wallID");

                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupBConnections")
                        .HasForeignKey("wallID1");

                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupCConnections")
                        .HasForeignKey("wallID2");

                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupDConnections")
                        .HasForeignKey("wallID3");
                });

            modelBuilder.Entity("Registration.Models.Term", b =>
                {
                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupATerms")
                        .HasForeignKey("wallID");

                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupBTerms")
                        .HasForeignKey("wallID1");

                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupCTerms")
                        .HasForeignKey("wallID2");

                    b.HasOne("Registration.Models.Wall", null)
                        .WithMany("groupDTerms")
                        .HasForeignKey("wallID3");
                });

            modelBuilder.Entity("Registration.Models.Wall", b =>
                {
                    b.HasOne("Registration.Models.ApplicationUser", "User")
                        .WithMany("Wall")
                        .HasForeignKey("userID");
                });
#pragma warning restore 612, 618
        }
    }
}
